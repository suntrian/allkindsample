<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <bean id="HelloSpringWorld" class="org.example.springSample.HelloSpringWorld" scope="singleton">
        <property name="name" value="Jenny"/>
    </bean>
    <!--使用构造器注入属性可以指定参数的位置和参数的类型以区分重载的构造器-->
    <bean id="car1" class="org.example.model.Car" scope="singleton">
        <constructor-arg name="brand" value="Audi" index="0"/>
        <constructor-arg name="corp" value="Volks" index="1"/>
        <constructor-arg name="price" value="123.53" index="2"/>
    </bean>
    <!--属性值可以通过Value子节点进行配置，特殊字符可以使用<![CDATA[]]>包裹-->
    <bean id="car2" class="org.example.model.Car">
        <constructor-arg name="brand" value="Audi"/>
        <constructor-arg name="corp">
            <value><![CDATA[<Shanghai>]]></value>
        </constructor-arg>
        <constructor-arg name="maxSpeed" value="280"/>
    </bean>

    <bean id="car3" class="org.example.model.Car">
        <constructor-arg value="DaZhong"/>
        <constructor-arg value="ShangHai"/>
        <constructor-arg type="int">
            <value>300</value>
        </constructor-arg>
    </bean>

    <bean id="person1" class="org.example.model.Person">
        <property name="name" value="Zhan3"/>
        <property name="age" value="15"/>
        <property name="car" ref="car1"/>
    </bean>

    <bean id="person2" class="org.example.model.Person">
        <property name="name" value="Li4"/>
        <property name="age" value="21"/>
        <property name="car">
            <ref bean="car2"/>
        </property>
    </bean>

    <bean id="person3" class="org.example.model.Person">
        <property name="name" value="Wang5"/>
        <property name="age" value="32"/>
        <property name="car">
            <bean class="org.example.model.Car">
                <constructor-arg name="brand" value="Honda"/>
                <constructor-arg name="corp" value="Guangzhou"/>
                <constructor-arg name="price" value="20000"/>
            </bean>
        </property>
    </bean>

    <bean id="person4" class="org.example.model.Person">
        <constructor-arg name="name" value="John"/>
        <constructor-arg name="age" value="31"/>
        <constructor-arg name="car">
            <null/>
        </constructor-arg>
    </bean>

    <bean id="person5" class="org.example.model.Person">
        <constructor-arg name="name" value="Linda"/>
        <constructor-arg name="age" value="33"/>
        <constructor-arg name="car" ref="car1"/>
        <property name="car.maxSpeed" value="240"/>
    </bean>

    <bean id="person6" class="org.example.model.Person">
        <property name="name" value="Mike"/>
        <property name="age" value="35"/>
        <property name="cars">
            <list merge="true">
                <ref bean="car1"/>
                <ref bean="car2"/>
                <bean class="org.example.model.Car">
                    <constructor-arg name="brand" value="Lambo"/>
                    <constructor-arg name="corp" value="Volks"/>
                    <constructor-arg name="maxSpeed" value="420"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="person7" class="org.example.model.Person">
        <property name="name" value="Lucy"/>
        <property name="age" value="31"/>
        <property name="cars" ref="othercar"/>
    </bean>

    <util:list id="othercar">
        <ref bean="car2" />
        <ref bean="car3" />
    </util:list>

    <bean id="person8" class="org.example.model.Person">
        <property name="name" value="Tina"/>
        <property name="age" value="33"/>
        <property name="car" ref="car2"/>
        <property name="carmap">
            <map>
                <entry key="AAA" value-ref="car1"/>
                <entry key="BBB" value-ref="car3"/>
            </map>
        </property>
    </bean>

    <bean id="fakeDatasource" class="org.example.springSample.model.FakeDatasource" init-method="initMethod"
          destroy-method="destroyMethod">
        <property name="properties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">123456</prop>
                <prop key="jdbcUrl">jdbc:mysql://test</prop>
                <prop key="dirver">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>
    <bean class="org.example.springSample.model.MyFakeDatasourcePostProcessor"/>

    <bean id="address1" class="org.example.model.Address" p:city="Beijing" p:street="YuandaRd"/>
    <bean id="person9" class="org.example.model.Person" p:name="Poli" p:age="12" p:cars-ref="othercar"
          p:address-ref="address1"/>
    <!--使用autowire属性指定自动装配的方式
   byName default 根据bean的id和bean的setter风格属性进行自动装配，如果有匹配的，则自动装配。
   byType 根据类型自动装配。car和car2都满足，byType会报错。
   确定：不够灵活，实际开发中很少使用自动装配。
-->
    <bean id="person10" class="org.example.model.Person" p:name="Lily" autowire="byName"/>
    <bean id="person11" class="org.example.model.Person">
        <property name="name" value="Micky"/>
        <property name="age" value="#{16}"/>
        <property name="account" value="#{105.52}"/>
        <property name="gender" value="#{true}"/>
        <property name="address" value="#{person9.address}"/>
    </bean>
    <!-- Spring允许用户通过depends-on属性设定bean前置的依赖bean，前置依赖的bean会在本bean实例化之前创建好。如果前置依赖多个bean，可以通过逗号、空格的方式配置bean的名称。 -->

    <bean id="car4" class="org.example.springSample.StaticCarFactory"
          factory-method="getCar">
        <constructor-arg value="audi"/>
    </bean>
    <bean id="instanceCarFactory" class="org.example.springSample.InstanceCarFactory"/>
    <bean id="car5" factory-bean="instanceCarFactory" factory-method="getCar" >
        <constructor-arg value="ford" />
    </bean>

    <context:component-scan base-package="com.suntr.springSample.model" />

</beans>
